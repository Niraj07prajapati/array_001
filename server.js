const express = require("express");
const cors = require("cors");
const { Pool } = require("pg");
const rateLimit = require("express-rate-limit");
const bodyParser = require("body-parser");
const path = require("path");

const app = express();
const port = 3000;

// ЁЯРШ PostgreSQL connection
const pool = new Pool({
  user: 'postgres',
  host: 'localhost',
  database: 'Badal',
  password: 'niraj',
  port: 5432,
});

// ЁЯМР Middleware setup
app.use(cors({
  origin: ["http://localhost:5500", "http://127.0.0.1:5500"],
  methods: ['GET', 'POST'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

// ЁЯУБ Serve static files from public directory
app.use(express.static(path.join(__dirname, 'public')));

// тЪая╕П Rate Limiting
const limiter = rateLimit({
  windowMs: 60 * 1000,
  max: 5,
  message: "рдмрд╣реБрдд рдЬреНрдпрд╛рджрд╛ рдкреНрд░рдпрд╛рд╕ред рдХреГрдкрдпрд╛ рдХреБрдЫ рд╕рдордп рдмрд╛рдж рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
});
app.use("/submit", limiter);

// ЁЯЫая╕П Ensure table exists
const ensureTableExists = async () => {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS invitation_responses (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100),
        phone VARCHAR(15),
        timestamp TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
      );
    `);
    console.log("тЬЕ Table ensured");
  } catch (err) {
    console.error("тЭМ Failed to ensure table exists:", err);
  }
};
ensureTableExists();

// ЁЯУи Submit Route
app.post("/submit", async (req, res) => {
  const { name, phone } = req.body;
  console.log("ЁЯУе Received:", name, phone);

  // тЬЕ Validation
  if (!/^[\p{L}\s]{2,50}$/u.test(name)) {
    return res.status(400).send("рдирд╛рдо рдорд╛рдиреНрдп рдирд╣реАрдВ рд╣реИред");
  }
  if (!/^\d{10}$/.test(phone)) {
    return res.status(400).send("рдлреЛрди рдирдВрдмрд░ 10 рдЕрдВрдХреЛрдВ рдХрд╛ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдПред");
  }

  try {
    await pool.query(
      "INSERT INTO invitation_responses (name, phone) VALUES ($1, $2)",
      [name, phone]
    );
    console.log("тЬЕ Data saved to PostgreSQL");

    // тЬЕ Redirect to thank you page
    res.redirect("/thank-you.html");
  } catch (err) {
    console.error("тЭМ Error saving to PostgreSQL:", err);
    res.status(500).send("рдХреБрдЫ рддреНрд░реБрдЯрд┐ рд╣реБрдИ рд╣реИред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред");
  }
});

// ЁЯФР Admin route to view responses
app.get("/responses", async (req, res) => {
  try {
    const result = await pool.query("SELECT * FROM invitation_responses ORDER BY timestamp DESC");
    res.json(result.rows);
  } catch (err) {
    console.error("тЭМ Error fetching responses:", err);
    res.status(500).send("рдбреЗрдЯрд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИ рд╣реИред");
  }
});

// тЬЕ Serve thank-you.html (if directly accessed)
app.get("/thank-you.html", (req, res) => {
  res.sendFile(path.join(__dirname, "thank-you.html"));
});

// ЁЯЪА Start server
app.listen(port, () => {
  console.log(`ЁЯЪА Server running on http://localhost:${port}`);
});
